<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="/start_script.py" timestamp="1531757919707">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Desktop/fileload V1.1/fileload.py" timestamp="1532636809840">
        <mark key="a" line="838" column="20" />
        <mark key="[" line="328" column="20" />
        <mark key="]" line="328" column="20" />
        <mark key="." line="328" column="20" />
        <mark key="^" line="783" column="94" />
      </file>
      <file name="/Dummy.txt" timestamp="1533142586648">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/untitled3/remotefindssh.sh" timestamp="1531864498787">
        <mark key="]" line="5" column="0" />
        <mark key="^" line="5" column="0" />
        <mark key="." line="5" column="0" />
      </file>
      <file name="/a.dummy" timestamp="1532381392073">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/flipframework/remotessh.sh.txt" timestamp="1531432841225">
        <mark key="[" line="19" column="19" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch.sh" timestamp="1532960827059">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Desktop/git clone/fileload.py" timestamp="1531757013292">
        <mark key="[" line="533" column="60" />
        <mark key="]" line="527" column="11" />
        <mark key="." line="527" column="11" />
        <mark key="^" line="527" column="11" />
      </file>
      <file name="$USER_HOME$/Desktop/Fileload/framework/fileload.py" timestamp="1531759962651">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/fileload_v1.0/python/fileload.py" timestamp="1533142410628">
        <mark key="[" line="301" column="21" />
        <mark key="]" line="801" column="53" />
        <mark key="." line="801" column="53" />
        <mark key="^" line="811" column="67" />
      </file>
    </filemarks>
    <jumps />
    <registers>
      <register name="1" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="&quot;" type="4">
        <text>created inital version to move it to tags Kasyap/Kamal</text>
      </register>
      <register name="2" type="4">
        <text encoding="base64">IyEgL2Jpbi9iYXNoCgplbnY9J2Rldl9waGFzZScKCnRkeT1gZGF0ZSArJVktJW0tJWRgClRJTUVTVEFNUD1gZGF0ZSAiKyVZLSVtLSVkICVIOiVNOiVTImAKCiNJbnRpYWxpemluZyB0aGUgYXJyYXlzIHdpdGggbGlzdCBvZiB2YWxpZCBhcmd1bWVudCB2YWx1ZXMKCmRiQXJyPSgnUElWVERCMCcgJ1BJVkREQjAnICdQSVZQREIwJyAnUElWU0RCMCcpCm9wdG5sQXJnYXJyMT0oJ1BSRVYnICdDVVJSJykKb3B0bmxBcmdhcnIyPSgnVVAnICdET1dOJykKCmhvc3RTcmM9J3NlcnZlci5wcm9wZXJ0aWVzJwojIGNoZWNrcyB3aGV0aGVyIHJpZ2h0IGFyZ3VtZW50cyBhcmUgcGFzc2VkIHRvIHNjcmlwdC4KaWYgW1sgJCMgLWVxIDAgfHwgJCMgLWd0IDMgXV07IHRoZW4KCiAgIGVjaG8gIldyb25nIGFyZ3VtZW50IGxpc3QgcGxlYXNlIHBhc3MgPGRhdGFiYXNlIG5hbWU+IGFzIHJlcXVpcmVkIGFyZ3VtZW50IGFuZCBvcHRpb25hbCBhcmd1bWVudHMgPHR5cGUgb2YgcXVlcnkgQ1VSUj4gIGFuZCBET1dOIGFzIHRoaXJkIGFyZ3VtZW50IHdoZW4gdGhlcmUgYXJlIHNlcnZlciB1cCBmb3IgdGhlIG9uZSB0aGF0IGFyZSBub3QgYWxpdmUgYmVmb3JlLiBCeSBkZWFmdWx0IHRoZSBwcm9ncmFtIGtpbGwgdGhlIHByZXZpb3VzbHkgaHVuZyBxdWVyaWVzIgogICBleGl0IDEKCmVsaWYgIFtbICQjIC1lcSAxICYmICIke2RiQXJyW0BdfSIgPX4gJDEgXV07IHRoZW4KCiAgIERBVEFCQVNFPSQxCiAgIE9QVElPTjE9IlBSRVYiCiAgIE9QVElPTjI9IlVQIgoKZWxpZiBbWyAkIyAtZXEgMiAmJiAiJHtkYkFycltAXX0iID1+ICQxICYmICIke29wdG5sQXJnYXJyMVtAXX0iID1+ICQyIF1dOyB0aGVuCgogICBEQVRBQkFTRT0kMQogICBPUFRJT04xPSQyCiAgIE9QVElPTjI9IlVQIgoKZWxpZiBbWyAkIyAtZXEgMyAmJiAiJHtkYkFycltAXX0iID1+ICQxICYmICIke29wdG5sQXJnYXJyMVtAXX0iID1+ICQyICAmJiAiJHtvcHRubEFyZ2FycjJbQF19IiA9fiAkMyAgXV07IHRoZW4KCiAgIERBVEFCQVNFPSQxCiAgIE9QVElPTjE9JDIKICAgT1BUSU9OMj0kMwoKZWxzZQoKICAgICBlY2hvICJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgLSIgJDEsJDIKICAgICBleGl0IDEKCmZpCgppZiBbWyAtZiBzZXJ2ZXJfbG9naW5fc3RhdHNfJHt0ZHl9LmxvZyAmJiAkMiAhPSAiQ1VSUiIgJiYgJDMgIT0gIkRPV04iIF1dOyB0aGVuCgogICBlY2hvICJQcm9jZXNzIHJhbiBvbiBhbGwgc2VydmVycyxDaGVjayB0aGUgc2VydmVyIGxvZ2luIHN0YXRzIGlmIHRoZXJlIGFueSBkb3duIG5vZGVzIHRoZW4gcGFzcyB0aGlyZCBhcmd1bWVudCBhcyBET1dOIHRvIHJ1biB0aGUgcHJvY2VzcyBmb3IgdGhlIGRvd24gcHJvY2VzcyIKICAgZXhpdCAxCgplbGlmIFtbIC1mIHNlcnZlcl9sb2dpbl9zdGF0c18ke3RkeX0ubG9nICYmICQyID09ICJDVVJSIiBdXTsgdGhlbgoKICAgZWNobyAiUHJvY2VzcyBzdGFydGVkIHRvIGtpbGwgY3VycmVudCBydW5uaW5nIHF1ZXJpZXMiCgplbGlmIFtbIC1mIHNlcnZlcl9sb2dpbl9zdGF0c18ke3RkeX0ubG9nICYmICQzID09ICJET1dOIiBdXTsgdGhlbgoKICAgZWNobyAiUmV0cnlpbmcgdG8gY29ubmVjdCB0byB0aGUgZmFpbGVkIGhvc3QuLi4uLi4uLi4uLi4iCiAgIGhvc3RTcmM9J3NlcnZlcl9sb2dpbl9zdGF0c18nJHt0ZHl9Jy5sb2cnCgplbHNlCiAgIGVjaG8gIlNFUlZFUjpTVEFUVVNMT0dNRVNTQUdFIiAgPiAgIHNlcnZlcl9sb2dpbl9zdGF0c18ke3RkeX0ubG9nCmZpCgoKI3NlcnZlciBzdGF0cyBmaWxlCgoKZm9yIG5hbWUgIGluIGBhd2sgJyhOUiA+MSkgJiYgJDEgIX4gLzpyZWFjaGFibGUvIHtwcmludCAkMX0nICRob3N0U3JjYAoKICAgIGRvCgogICAgICBzZXJ2ZXI9IiQoY3V0IC1kIDogLWYxIDw8PCIkbmFtZSIpIgogICAgICBpcD0iJChjdXQgLWQgOiAtZjIgPDw8IiRuYW1lIikiCiAgICAgIHBpbmdUZXN0PWBwaW5nIC1jIDEgJGlwIHwgZ3JlcCBVbnJlYWNoYWJsZSB8IHdjIC1sYAoKICAgICAgaWYgWyAkcGluZ1Rlc3QgLWVxIDAgXTsgdGhlbgogICAgICAgICBlY2hvICRzZXJ2ZXIiOiIkaXA6InJlYWNoYWJsZSBvbiAtIiAkVElNRVNUQU1QID4+IHNlcnZlcl9sb2dpbl9zdGF0c18ke3RkeX0ubG9nCiAgICAgICAgIGVjaG8gIkNvbm5lY3RlZCB0byAiICRzZXJ2ZXIKICAgICAgICAgc3NoIHJvb3RAJHNlcnZlciAiYmFzaCAtcyIgPCBmaW5kc3RhbGVxdWVyaWVzX3YwLjEuc2ggJERBVEFCQVNFICAkT1BUSU9OMQogICAgICBlbHNlCiAgICAgICAgIGVjaG8gJHNlcnZlciI6IiRpcDoiVW5yZWFjaGFibGUgb24gLSIgJFRJTUVTVEFNUCA+PiBzZXJ2ZXJfbG9naW5fc3RhdHNfJHt0ZHl9LmxvZwoKCiAgICAgIGZpCgogICAgZG9uZTs=</text>
      </register>
      <register name="3" type="4">
        <text>de_msg
        emAil(fnlStrg</text>
      </register>
      <register name="4" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="-" type="4">
        <text>created inital version to move it to tags Kasyap/Kamal</text>
      </register>
    </registers>
    <search>
      <last-dir>0</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search />
      <history-cmd />
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>