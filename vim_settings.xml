<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="/start_script.py" timestamp="1531757919707">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Desktop/fileload V1.1/fileload.py" timestamp="1532628272649">
        <mark key="a" line="837" column="20" />
        <mark key="[" line="797" column="47" />
        <mark key="]" line="782" column="94" />
        <mark key="." line="782" column="94" />
        <mark key="^" line="782" column="94" />
      </file>
      <file name="/Dummy.txt" timestamp="1532381852178">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/untitled3/remotefindssh.sh" timestamp="1531864498787">
        <mark key="]" line="5" column="0" />
        <mark key="^" line="5" column="0" />
        <mark key="." line="5" column="0" />
      </file>
      <file name="/a.dummy" timestamp="1532381392073">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/flipframework/remotessh.sh.txt" timestamp="1531432841225">
        <mark key="[" line="19" column="19" />
      </file>
      <file name="$USER_HOME$/Desktop/git clone/fileload.py" timestamp="1531757013292">
        <mark key="[" line="533" column="60" />
        <mark key="]" line="527" column="11" />
        <mark key="." line="527" column="11" />
        <mark key="^" line="527" column="11" />
      </file>
      <file name="$USER_HOME$/Desktop/Fileload/framework/fileload.py" timestamp="1531759962651">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
    </filemarks>
    <jumps />
    <registers>
      <register name="1" type="4">
        <text>de_msg
        emAil(fnlStrg</text>
      </register>
      <register name="&quot;" type="4">
        <text>,&quot;Error LOG File&quot;</text>
      </register>
      <register name="2" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="-" type="4">
        <text>,&quot;Error LOG File&quot;</text>
      </register>
    </registers>
    <search>
      <last-dir>0</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search />
      <history-cmd />
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>