<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="/start_script.py" timestamp="1533150757024">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Desktop/fileload V1.1/fileload.py" timestamp="1532636809840">
        <mark key="a" line="838" column="20" />
        <mark key="[" line="328" column="20" />
        <mark key="]" line="328" column="20" />
        <mark key="." line="328" column="20" />
        <mark key="^" line="783" column="94" />
      </file>
      <file name="/Dummy.txt" timestamp="1534800757074">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/fileload_v1.0/python/parse.py" timestamp="1533589304678">
        <mark key="[" line="35" column="28" />
        <mark key="]" line="25" column="8" />
        <mark key="." line="25" column="8" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/execsh/execsh.py" timestamp="1534267053361">
        <mark key="[" line="5" column="0" />
        <mark key="]" line="5" column="0" />
        <mark key="." line="5" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/untitled3/remotefindssh.sh" timestamp="1531864498787">
        <mark key="]" line="5" column="0" />
        <mark key="^" line="5" column="0" />
        <mark key="." line="5" column="0" />
      </file>
      <file name="/Python Console" timestamp="1533223339919">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/fileload_v1.0/test_phase/fileload-v1.1/fileload.py" timestamp="1533927123989">
        <mark key="[" line="338" column="8" />
        <mark key="]" line="338" column="8" />
        <mark key="." line="338" column="8" />
      </file>
      <file name="/a.dummy" timestamp="1534263491367">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/fileload_v1.0/test_phase/fileload.py" timestamp="1533770989278">
        <mark key="[" line="347" column="50" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/flipframework/remotessh.sh.txt" timestamp="1531432841225">
        <mark key="[" line="19" column="19" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch.sh" timestamp="1532960827059">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/Desktop/git clone/fileload.py" timestamp="1531757013292">
        <mark key="[" line="533" column="60" />
        <mark key="]" line="527" column="11" />
        <mark key="." line="527" column="11" />
        <mark key="^" line="527" column="11" />
      </file>
      <file name="$USER_HOME$/Desktop/Fileload/framework/fileload.py" timestamp="1531759962651">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/fileload_v1.0/python/fileload.py" timestamp="1534526140490">
        <mark key="[" line="844" column="122" />
        <mark key="]" line="844" column="122" />
        <mark key="." line="844" column="122" />
        <mark key="^" line="176" column="15" />
      </file>
      <file name="$USER_HOME$/Desktop/HDFS/branch/P10008-HadoopApp/fileload-v1.0/python/fileload.py" timestamp="1533590422414">
        <mark key="[" line="495" column="29" />
      </file>
      <file name="$USER_HOME$/PycharmProjects/fileload_v1.0/python/generic_func_exec.py" timestamp="1534802169103">
        <mark key="s" line="62" column="4" />
        <mark key="[" line="149" column="169" />
        <mark key="]" line="152" column="180" />
        <mark key="." line="152" column="180" />
        <mark key="^" line="152" column="180" />
      </file>
    </filemarks>
    <jumps>
      <jump line="190" column="85" filename="$USER_HOME$/PycharmProjects/fileload_v1.0/python/generic_func_exec.py" />
      <jump line="47" column="4" filename="$USER_HOME$/PycharmProjects/fileload_v1.0/python/generic_func_exec.py" />
    </jumps>
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64">ICAgICAgICBmb3JtYXRlcnJtc2coIkhBV1EgUXVlcnkgIixzdHIoZS5wZ2NvZGUpLCJ7MH0iLmZvcm1hdChzdHIoZS5wZ2Vycm9yKSkpCg==</text>
      </register>
      <register name="-" type="4">
        <text encoding="base64">UXVlcnkg</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxUT1w+</text>
      </register>
      <register name="0" type="4">
        <text>table l</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgICAgICBmb3JtYXRlcnJtc2coIkhBV1EgUXVlcnkgIixzdHIoZS5wZ2NvZGUpLCJ7MH0iLmZvcm1hdChzdHIoZS5wZ2Vycm9yKSkpCg==</text>
      </register>
      <register name="2" type="4">
        <text>#print &quot;Directory check completed&quot;
        ##else:</text>
      </register>
      <register name="3" type="4">
        <text encoding="base64">ICAgJycndHJ5OgogICAgICAgIGNvbm4gPSBwc3ljb3BnMi5jb25uZWN0KCJob3N0YWRkcj0lcyBkYm5hbWU9JXMiICUgKGhvc3QsIGRiTmFtZSkpCiAgICAgICAgY3VyID0gY29ubi5jdXJzb3IoKQogICAgZXhjZXB0IHBzeWNvcGcyLkVycm9yLCBlOgogICAgICAgIHByaW50ICd1bmFibGUgdG8gY29ubmVjdCB0byB0aGUgZGF0YWJhc2UgJXMnICUgZQogICAgICAgIGVycl9tc2cgPSAnRXJyb3I6IERhdGFiYXNlIGNvbm5lY2l0aXZpdHkgaXNzdWVzIC0lcycgJSBlCiAgICAgICAgZGVidWdfbXNnID0gJ0RFQlVHOlBsZWFzZSBjaGVjayB0aGUgZGF0YWJhc2UgY29ubmVjdGlvbnMnCiAgICAgICAgZW1haWxfc3RyID0gZXJyX21zZyArICdcbicgKyBkZWJ1Z19tc2cKICAgICAgICBlbUFpbChlbWFpbF9zdHIsICdJc3N1ZSBpbiBEYXRhYmFzZSBDb25uZWN0aW9uIFN0cmluZycsICcnKQogICAgICAgIHN5cy5leGl0KDEpJycn</text>
      </register>
      <register name="4" type="4">
        <text>'''def fetchAsOfDt(cursor):
    try:
        print '---------------------------------------'
        print 'Function_Name  :  fetchAsOfDt()'
        conn = psycopg2.connect(&quot;hostaddr=%s dbname=%s&quot; % (host, dbname))
        cur = conn.cursor()
        cur.execute('select max(bus_proc_dt) from ref_hub.bus_proc_dt_ext;')
        dateValue = cur.fetchone()
        asOfDt = datetime.datetime.strftime(dateValue[0], '%Y-%m-%d')
        print 'As_of_dt       :  %s' % asOfDt
        return (str(asOfDt))
    except psycopg2.DatabaseError, e:
        print &quot;I am unable to connect to the database %s&quot; % e
        err_msg = &quot;Error: %s&quot; % e
        debug_msg = &quot;Please Check the Database Connection Properties&quot;
        email_str = err_msg + '\n' + debug_msg
        emAil(email_str, 'Database connectivity Issue', '')
        sys.exit(1)
    finally:
        conn.commit()
        cur.close()
        conn.close()'''</text>
      </register>
      <register name="5" type="4">
        <text>cur.close()
    conn.close()</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgICAgICBlcnJfbXNnID0gJ0Vycm9yOiBEYXRhYmFzZSBjb25uZWNpdGl2aXR5IGlzc3VlcyAtJXMnICUgZQo=</text>
      </register>
      <register name="7" type="4">
        <text encoding="base64">ICAgICNkYk5hbWUsIGhvc3QsIGZsZV9IdWIgPSBnZXRDb25uKCkKICAgICNwcmludCBkYk5hbWUsIGhvc3QsIGZsZV9IdWI=</text>
      </register>
      <register name="8" type="4">
        <text>#funcParameters = ','.join(
     #   [eval(x) if x in ['as_of_dt', 'bus_proc_dt', 'as_of_tdy'] else x for x in layRead[&quot;db_prop&quot;][0][&quot;parameters&quot;]])
    #print funcParameters</text>
      </register>
      <register name="9" type="4">
        <text>''''def validateEmail(SERVER, validLst):
    host = SERVER
    emailProp = '/home/phdftpuser/%s/project/config/Email.properties' % (g_test_var)
    config = ConfigParser.RawConfigParser()
    config.read(emailProp)
    emailLst = config.get('Email Header', 'email.id').split(',')
    server = smtplib.SMTP()
    server.set_debuglevel(0)
    server.connect(host)
    server.helo(host)
    for i in emailLst:
        server.mail(i)
        code, msg = server.rcpt(str(i))
        if code == 250:
            validLst.append(i)
    server.quit()
    return validLst'''

'''def sendErromail(errInfo, job, process):
    print 'Email Started'
    today = datetime.datetime.now().date()
    SERVER = &quot;mailhost.waddell.com&quot;
    BODY = errInfo
    address_book = []
    if process == '':
        SUBJECT = 'Tasked Failed -- %s in DEV for process on %s' % (job, str(today))
    else:
        SUBJECT = 'Tasked Failed -- %s in DEV @ %s on %s' % (job, process, str(today))
    #address_book = validateEmail(SERVER, address_book)
    FROM = &quot;HDFSSupportTeam@waddell.com&quot;
    #TO = ','.join(address_book)
    TO = &quot;HDFSSupportTeam@waddell.com&quot;
    msg = MIMEMultipart()
    msg['Subject'] = SUBJECT
    msg['From'] = FROM
    msg['To'] = TO
    msg.preamble = 'Multipart massage.\n'
    msg.attach(MIMEText(BODY, 'plain'))
    try:
        server = smtplib.SMTP(SERVER)
        server.sendmail(FROM, address_book, msg.as_string())
        print 'Message Sent'
    except SMTPEXCEPTION:
        print &quot;Error: unable to send Error email with attachment&quot;'''</text>
      </register>
    </registers>
    <search>
      <last-search encoding="base64">XDxUT1w+</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxUT1w+</last-pattern>
      <last-dir>-1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDxUT1w+</entry>
      </history-search>
      <history-cmd />
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>